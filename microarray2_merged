---
title: "microarray2"
author: "Seoyeon Oh"
date: "12/8/2021"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r global_options, include=FALSE}
knitr::opts_chunk$set(fig.align = 'center')
knitr::opts_chunk$set(out.width = '60%')
knitr::opts_chunk$set(fig.width=12, fig.height=8)

#library("mogene10sttranscriptcluster.db")
library("ArrayExpress")
library("arrayQualityMetrics")
library("ggplot2")
#library("huex10sttranscriptcluster.db")
library("limma")
library("oligo")
library("siggenes")
library("affy")
#library("pd.huex.1.0.st.v2")
library("RSQLite")
library("DBI")
library("htmltools")
library("biomaRt")
library("tximport")
library("wateRmelon")
```

```{r}
setwd("/Users/seoyeon/Desktop/MSc Bioinformatics Year 1/Applied High-throughput Analysis/Project/Datasets/Microarray2")
dir <- "/Users/seoyeon/Desktop/MSc Bioinformatics Year 1/Applied High-throughput Analysis/Project/Datasets/Microarray2/"
```

##E-GEOD-64750

### General info

The array used for this dataset is A-AFFY-45 - Affymetrix GeneChip Mouse Genome 430 2.0 [Mouse430_2]. In this experiment, susceptible mice were infected with H5N1 influenza. After 72h RNA was extracted from the lungs of the mice. We used 9 samples of this experiment (susceptible mice).

### Intensity values
Read in the microarray data and examine dimensionsionality of the intensity value matrix.

```{r, message=F}
id <- "E-GEOD-64750"
exonCELs <- list.celfiles(dir)
data.raw_2 <- read.celfiles(paste(rep(dir,length(exonCELs)),exonCELs,sep=""))
```

```{r}
dim(exprs(data.raw_2))
```

```{r}
head(exprs(data.raw_2))
```

### Annotation

Here we provide basic sample annotation, including the phenotype of interest and relevant other features (e.g. confounders). This dataset contains array data (A-AFFY-45) of different mice strains (BXD98, BXD97, BXD83, BXD73, BXD68, BXD67 ,BXD43, C57BL/6J, DBA/2J) infected with influenza virus H5N1.

```{r}
sdrf <- read.delim("./E-GEOD-64750.sdrf.txt")
print(sdrf[,c("Source.Name","Comment..Sample_source_name.","Array.Design.REF", "Characteristics..strain.", "Comment..Sample_description.")])
```

###Which samples we are using, and not using:
We will be using samples involving susceptible and resistant mouse strain, DBA/2J (GSM1579245 - GSM1579253) and C57BL/6J (GSM1579254 - GSM1579260) respectively. Each strain was inoculated with H5N1 influenza A virus. We are not using the data from other strains (BXD98, BXD97, BXD83, BXD73, BXD68, BXD67, BXD43) which do not contain non-infected control samples.

```{r}
#Load in the ExpressionFeatureSet object
MouseExp_AE2 <- ArrayExpress("E-GEOD-64750")

#Load in the Affybatch object
MouseExp_pheno2 <- ReadAffy(phenoData=pData(MouseExp_AE2))
```

```{r}
#load first lines of output from the object
head(exprs(MouseExp_pheno2))  
pData(MouseExp_pheno2)  #source name, comment sample description, sample source name, sample title, characteristics, organism, term.source, accession number, sex ...
```

```{r}
filter <- colnames(data.raw_2)[data.raw_2@phenoData@data$index <= 16]
filter

filtered <- data.raw_2[,filter]
filtered

dim(exprs(filtered))  #1004004 features       9 samples
```

```{r}
head(exprs(filtered))
arrayQualityMetrics(filtered,outdir="./rawCD",force=T)
```

```{r}
arrayQualityMetrics(filteredD,outdir="./rawlog",force=T,do.logtransform=T)
```

```{r}
miceRMA <- oligo::rma(filtered, background=T)
miceRMA

arrayQualityMetrics(miceRMA, force=TRUE)
```

```{r}
## Differential expression analysis with RMA preprocessed data
####################

## Additional preprocessing
samples <- c(replicate(5, "DBA/2J control"), replicate(4, "DBA/2J infected"), replicate(3, "C57/BL6J control"), replicate(4, "C57/BL6J infected"))
samples

condition <- c(replicate(5, "control"), replicate(4, "infected"), replicate(3, "control"), replicate(4, "infected"))

pData(miceRMA)[,2] <- condition
pData(miceRMA)[,3] <- c(replicate(9, "DBA/2J"), replicate(7, "C57/BL6J"))
pData(miceRMA)[,4] <- samples

colnames(pData(miceRMA)) <- c("index", "condition", "strain", "samples")
pData(miceRMA)
```

The variability of the strain is encompassed in the model but you do not test for it
```{r}
condition <- factor(pData(miceRMA)[,2])
strain <- factor(pData(miceRMA)[,3])
condition
strain
```

```{r}
design <- model.matrix(~0+condition*strain)
colnames(design)<-c("Control","Infected", "strain","interaction")
# for strain, 1 represents DBA/2J, 0 represents c57/BL6
design
```
```{r}
fit <- lmFit(miceRMA, design)
cont.matrix <- makeContrasts(InfectedvsControl="Infected-Control", levels=design)
cont.matrix

fit2 <- contrasts.fit(fit,cont.matrix) 
fit2 <- eBayes(fit2)
fit2

volcanoplot(fit2)
limma::plotMA(fit2)
```
```{r}
# DE results
LIMMAout <- topTable(fit2,adjust="BH",number=nrow(exprs(miceRMA)))
#head(LIMMAout)

## Check intensity values for top results
exprs(miceRMA)[rownames(exprs(miceRMA))%in%rownames(head(LIMMAout)),]
```

```{r}
#mean expression of control/DBA2J
rowMeans(exprs(miceRMA)[rownames(exprs(miceRMA))%in%rownames(head(LIMMAout)),1:5])

#mean expression of infected/DBA2J
rowMeans(exprs(miceRMA)[rownames(exprs(miceRMA))%in%rownames(head(LIMMAout)),6:9])

#mean expression of control/C57BL6
rowMeans(exprs(miceRMA)[rownames(exprs(miceRMA))%in%rownames(head(LIMMAout)),10:12])

#mean expression of infected/C57BL6
rowMeans(exprs(miceRMA)[rownames(exprs(miceRMA))%in%rownames(head(LIMMAout)),13:16])

```


```{r}
#Adjustments on p values using Benjamini-Hochberg
LIMMAout$diffexpressed <- "NO"
LIMMAout$diffexpressed[LIMMAout$logFC > 0 & LIMMAout$adj.P.Val < 0.05] <- "UP"
LIMMAout$diffexpressed[LIMMAout$logFC < 0 & LIMMAout$adj.P.Val < 0.05] <- "DOWN"

#No adjustments on pvalues
LIMMAout$diffexpressed_no_BH <- "NO"
LIMMAout$diffexpressed_no_BH[LIMMAout$logFC > 0 & LIMMAout$P.Value < 0.05] <- "UP"
LIMMAout$diffexpressed_no_BH[LIMMAout$logFC < 0 & LIMMAout$P.Value < 0.05] <- "DOWN"

C57_down <- LIMMAout[LIMMAout$diffexpressed_no_BH=="DOWN", ]
C57_up <- LIMMAout[LIMMAout$diffexpressed_no_BH=="UP", ]

a <- subset(LIMMAout, LIMMAout$diffexpressed_no_BH=="DOWN")

ggplot(data = LIMMAout, aes(x= logFC, y = -log10(adj.P.Val), colour = diffexpressed)) +
 geom_point()+
 theme_bw()+
  geom_hline(yintercept = -log10(0.05), linetype="dashed", color="midnightblue")+
  annotate("text", min(4), 1.3, vjust = -1, label = "Cutoff", color="midnightblue")+
 #ggtitle("Differentiall (unadjusted P-value)") +
 labs(colour = "Differentialy expressed")
 #theme(plot.title = element_text(hjust = 0.5, face = "bold.italic"))

ggplot(data = LIMMAout, aes(x= logFC, y = -log10(P.Value), colour = diffexpressed_no_BH)) +
 geom_point()+
 theme_bw()+
  geom_hline(yintercept = -log10(0.05), linetype="dashed", color="midnightblue")+
  annotate("text", min(4), 1.3, vjust = -1, label = "Cutoff", color="midnightblue")+
 #ggtitle("Differentiall (unadjusted P-value)") +
 labs(colour = "Differentialy expressed")
```

```{r}
length(which(LIMMAout$diffexpressed=="UP"))  
length(which(LIMMAout$diffexpressed=="DOWN")) 

length(which(LIMMAout$diffexpressed_no_BH=="UP"))  
length(which(LIMMAout$diffexpressed_no_BH=="DOWN")) 
```

```{r}
## Load annotation and sort alphabetically on probe name
annotation_MA <- read.table("A-AFFY-45.adf.txt",header=T,sep="\t",skip=17,fill=T)
print(head(annotation_MA))
annotation_MA <- annotation_MA[sort(annotation_MA$Composite.Element.Name,index.return=T)$ix,]

## Check if all probes are present in both sets
dim(annotation_MA)
dim(LIMMAout)

## Double check => "Assumption is the mother of all fuck up's ;)"
sum(annotation_MA$Composite.Element.Name==sort(rownames(LIMMAout)))

## Sort LIMMA output alphabetically on probe name
LIMMAout_sorted <- LIMMAout[sort(rownames(LIMMAout),index.return=T)$ix,]
#LIMMAout_sorted

## Add gene names to LIMMA output
LIMMAout_sorted$gene <- annotation_MA$Composite.Element.Database.Entry.ensembl.
LIMMAout_annot <- LIMMAout_sorted[sort(LIMMAout_sorted$adj.P.Val,index.return=T)$ix,]

#sort by adjusted p value from most significant to least 
LIMMAout_sorted2 <- LIMMAout_sorted[order(LIMMAout_sorted$adj.P.Val, decreasing= F),]

#extract top 50 significant DE genes 
LIMMAout_sorted2[1:50,]$gene

# Have a look at the results and search for other probesets for your DE genes
head(LIMMAout_annot)
LIMMAout_annot[LIMMAout_annot$gene=="	ENSMUSG00000022548",]
```

```{r}
#extract DE genes
DEgenes <- LIMMAout_sorted2$gene[LIMMAout_sorted2$adj.P.Val <= 0.05]
DEgenes <- DEgenes[DEgenes != ""]

head(DEgenes) #list of DE genes
length(DEgenes) #1588 DE genes
```
